from Crypto.Util.number import *
from sage.all import *

N = 0x614D9A106993A792C144715B0269A2726EB18A2E7B1EA7061BCE1F6ACB31AF6289309D67CE6B28B3E88110C42785C0CA23833CC0E2AA4A30AADB16D25DB7A74EF03B0898B7AF47D56D4538B0F556B2779ED86E0600F821354D51F8551CCD23BBF8BF91EB9A9283A3D4D5248E3F404B4C6646A7DC805F29940A7E29D2F50343E1ACC0D0067606606B331A64881BBAFEAFEB8CA44E736B41EAB4608097216F587A1A4F74518614B46E91505E07C3A280B701EE88CA189E9903D601BC934584409D560027E5B34ADB1F4949333AB5DB34E95E49374E354D4DDC088855F1AAE7A95E32EF195521B33F118169AE613E3FD5BF8D2942C2BDE9EF506346698B0B5192C86B1EFE24CFFB907652AFD5F0CB3966C7470195122CED63F5C40A4D9A3B6704E0B186AB7B9E3296B1299B6FA133D2455A8F8D8A9007A22BC61546B357EA314B0D369D72D22063C5ED6C14AA2A7EDF31BDF93E63149818EF3724CA1CAC367AC22B51260C793212EA221E062FCCA68F28A4CD0B3BBEEE03B9C73FD064C8298E775AB8A63C94DB480A1EBA918D09CBA975304EED4FA5E874FC964E328547C23790E97102C6AD0BCA9810DABB6285906F13D41798D3237333288B4498610D1A8FA79BE85A522232A7CB904CD7C9B7FAB995F39CD22A9758A5C2B6DCF44299DF1E3E2AC360339B341CA6BEB31ECCBA39EBD6F98DEE127C6B5298DB152FA6920B9703AB
c = 0x3A130D7F737DD7E5901290A55349342A535B94BB89831B1C02539480FE76B07AD64F5D2B618E637F4DDC536D46A1C05B219EAFC9B609629AE6D1A9C1A888BC8B34D81B9F681FD9CA3919F8382B09F2BA1D78DEDFFC093C4795200D89AEA37B0AC7F23C8EB621810D7A130FA1E324C9A6EA8C3AD69200057F91003D1305293BE05D662505E45EA9172097CB030F8FDDE2712070FC6F9DEF504440CAC6C46305F7D81F6E40D53EC8AE6C653298E1989AC8F9616DC1D93CB6976AC1C777FC7E50F1A8EF3100BA4871C769C8A3B52A37E15F523A49F69D9FF93C01639D0D099884E113483B580E224A12CBBC6711AE8C5AF3ECD375F6DA1BE68F7FA7425F6E81EA63456D73F9A24BA56766127D6A2871FF2945DBDC1FC14CCE2D94C6AA9C114896A1EF06F992666484BC02EACFE540DF0C8138C05C572737F42D4069D3BC254DF1C825B3A8844EDB38F486F96CF153AC07523E430E0546B58ABB6FE4268460B722EFBE9EE5C718A586F90588E9AD4C49DB0068DC1DB942756700142C26D512969428141D70C982B003D1D17450CEAB0E7845B1E14CE10DB3245366D4CD6F46457E0C6E05827F8E9B8BF4163DF1712087ABA0BCE629951D7F2D5279B793BF8131A4B8EE84916E06B49AE4582EEA9B43B58A2EE77E6618103AB28C1978800AD07CD12F1AB6843385D18D33B191ABCCDC18F6FA90004F0EDAB5CC1FF3C6049CC1E41E89

# rkm's mightly code
load("inequality_cvp.sage")


# from util.py
def mt2dec(X, n, m):
    x = 0
    for i in range(n):
        for j in range(n):
            x = x + int(X[i, j]) * (m ** (i * n + j))
    return x


# inverse of mt2dec
def dec2mt(a, n, m):
    # by BaaaaaaaarkingDog
    X = matrix(Zmod(m), n, n)
    for i in range(n):
        for j in range(n):
            X[i, j] = a % m
            a //= m
    return X


def solve1():
    # by BaaaaaaaarkingDog
    a = bytes_to_long(b"Welcome to RCTF 2022")
    b = bytes_to_long(b"IS_THIS_LCG?")
    trunc = 2 ^ 850
    m = 2 ^ 1024
    n = 8

    x0 = 0xC65F1C882BE27B574C70F10E155ED3D3792D037D3C7
    x1 = 0x142E1A26667E31A70EB58FA1E2B296D31A09675FA687
    x2 = 0x17F366E283147917CC044778BBCE2816884577126A9C
    x3 = 0x2A316775DDA35AD9A0E8A038757C85F216E91516F1CE
    x4 = 0x3EF873EE8FA84FD071777521C78CB10A929F92F10DC7
    x5 = 0x14E228828CB5090361501ACAC3108F05096FA8976E9C
    x6 = 0x2E664838384824369607284AD9950F839F23A85C1974
    x7 = 0x11AFFCBDF3DA150C318BCC7096D21E8EB4BDAF904B9E
    ys = [x * trunc for x in [x0, x1, x2, x3, x4, x5, x6, x7]]

    M = Matrix(ZZ, n * 2 - 1, n - 1 + n)
    for i in range(n - 1):
        M[i, i] = a
        M[i + 1, i] = -1
        M[i, i + n - 1] = 1
        M[n + i, i] = m
    M[n - 1, -1] = 1

    ub = []

    for y1, y2 in zip(ys, ys[1:]):
        ub.append(y2 - a * y1 - b)

    lb = list(ub)
    lb += [0] * n
    ub += [trunc] * n

    result, applied_weights, fin = solve(M, lb, ub)

    xs = [ys[i] + fin[i] for i in range(8)]
    x8 = (a * xs[7] + b) % m
    p = next_prime(x8)

    assert N % p == 0
    return p


def solve2():
    x0 = 0x524456278D175EDD6BCC3F2BBB8160A87DFE07092DB7EEDD1E4E3521E9CEF7925E9C965A47CE9B7349456938FBF6D1D92095CFE7CDC06C8DBEAC5284982D027179D8D363B1D1A9B95C2BB1334E589AC3C013D8CFF1C904D0C2AED1F281E997BE89ABE3D0D2D668DC53ADC4AE9870474A23FF993598BF2B51679179C8A1568619
    x1 = 0x2F340FB1C6761E084B1465C5078F36E9CAF7F9D6DEECB969CC84FB5B85B1E4070157094C835333349F3D317E6A78A31A27D1FF0F8DFB103EAD7444F26AC7B8BE6B8EC346A8C8B4FE6F983DB2729B6490CE0E1EA115B62F5E2888911D278153E3377A7456705C4F1A56588D8F727A91A8A401A852DD26573B2DC2CCF6A4AF1DE2
    x2 = 0x92B2BBDF0C336BE756AC47CC0B98FBC76B9AC679DB96A5AFD8FE500D16F4997503EE33D0508A59FFF172042D6DCC4994A2D8220ADCD8F5E591458B9409468C51B92DCACF73E793AF3F793B9BECB9CBB0704834861A43E1D1FD5CD5A9BE14FAFA8EC02DF059FB3E1A3B0E7A8FB9969D42FFC13E2E3404FD539CD0D95B15F69F33
    x3 = 0x795E49D6BC45ECF4D349D16058166F6422311344E3E6D8913A8B0A28225C92E203DFBA92DD809A58A3630BFBB4CDF6D3118F172F6D6CB7C35CD4F9CF70947D091659E2EC4E248EAF2C456D58A149DD1FFF7667630504CBB55CD82E3A2FE681F9B23DE329D70A85F4BADCE87168DFB37B96B9EDBEEB39A3D4AB28C130E9150140
    x4 = 0x5A2BF69E31EEF5EC1B990A2D2E3F8CCB08BA9996DB2022775770B3B486909653B5347C15CEAB62B167AD1DFA6A997EFB56315FD6AFDE2E6C1B5AF5A6E9B818556669992F148525C990BDB61E712339856DCF6E0F27ED8279BB32ABA553BBAB2AD3AC4ACCF3084638528A34434EC80DF33705E381B39E9786593CFF3E04A5B23D
    x5 = 0x5BAEB38339D662E8C16B1F16CD6129AF38ADEBB264FFB197D6245F56DF813C64B7EF28E60137B54D15A4227CA6ECD08F6CCBBBCB598BC94B1F326D8D488E13179D2999FB2C922165C9F27C2D7D0267E6924CE6395C33EC52A35776E88874877D8CCBBF8CA9EE214A7B73A8F7DA23DB02978F3B8BD145C2CCA66B17638169F5E9
    x6 = 0x4C2FC188B5CD7F4D19A4B120402946D7F8CA11C711E7771C39814E01C692160B7545EDCFF82A22D4634C416185EB58FF44ADFDCE5DC36A6D7C663F57EB19FC34F1A6C7E493518B094AD46FB8F9B6EB741C4666878AC91898116EB353A0A5AAB9289322AACA6BED2EE104DB17BE339AF54538635208F756DA15BF46D18B0549A
    X = [x0, x1, x2, x3, x4, x5, x6]

    T = matrix(
        ZZ,
        [
            [
                2 * X[i] ^ 2 + 2 * X[i] * (X[i - 1] + X[i + 1]),
                2 * X[i] - (X[i - 1] + X[i + 1]),
                2 * X[i],
                2,
                (X[i - 1] + X[i + 1]) * X[i] ^ 2,
            ]
            for i in range(1, 6)
        ],
    )

    p = gcd(T.determinant(), N)
    return p


def solve3():
    # by BaaaaaaaarkingDog
    n, m = 8, next_prime(2 ^ 16)
    X0 = 0xC54AAD8BD2B3233576847209AD1ADE5F535622AAB2A6279464832DEA3DC88E7898A58130E36273143A90FCD4497079010E50658C2981E66E09AE86DE089BF1F7123ABB7D71FE68CF8D9EAB3A2FC4792F1CB6444EFF47C0F666995096C43EF8149FA78C061CA62809A2EADB00AC0DFF81FB4163335C0A8014082E95B5007A2E2C
    X1 = 0x3A3944BB3FD77217AB57358B174DBEF9F704B844FB09F0D05BD4CFAFC5A758F3B4D60C5CB584B1BB37F0C83BCE8CBA67BD04D11826433AFBA1717106DA48A6CC22D571A0FA57FE63C29896783D6A9676F241CF4C9B1081AEE364334ED3F80D680AD4C52D8A9E026FDFC97C1CDA397A1F37C368420176E3270299EFA21FA4C614
    X2 = 0x309838246999C3A8920A9E8911F0C643EB614A9C522FB2CD5776BF582D7AD79796558B839E8FFC393E479AA0761D961DF6860F9C44DEA9B073A5006C2705128A7E7B139C407D15F430BD1A60D679D9F40DEAB664C84553FA8B9C1E8AEEB42E75C5C305D8B86E09DEBC9E193617F9FD619A0053017F71810CC3A48BB1FE89878
    X3 = 0x38ACF9569013EA3A32B18AEF48ED6D0AD6557AFE3E929C757D541039FAEFAB0EEB53C5341A4AE5B9DF610EFCC66D09AE4238C569929D46409DD4F21D75A7BC97F3D8EED2DD397124D5A94946CCB8E8DA8D030B4DB4AC8821C313BDC87C8C25576050503891CA629B232E4F1B5C9BAC4809979FC4DFB8F07260B3CDD62B2F45A6
    X4 = 0xDA4663505A3CE430F75FE908C34F96DFC8E3A997DCD378205274B1855804D069044558EEB09F0E36FEEB34EDD82FFEC268095EEF4ACC795CACF4921BB33DAB678F0EE930E7718839962511C49F91DDDB4389CD9DB61BA49BAADD3A876952291D31B85B04AB2561A85542879D0E3287AD6F1C60B28DAF05A56CAB18955DD8D48A
    X5 = 0x8E7250916637C65A685F5DB8A3E5E84E223EBE59346F807048F16F5EE98CCF10679B3B1952E50BA32730906794D40C1AEBDECCD059B775BCE13186907EA883230160254254EBC4006A452826EB75361F92E5AE9B30F87E8C8ABED2A90117ECCF1B4E6AAC455B1FC6A0983141DFE1DF81B912612649E3BB48560ECA66AF9C9B76
    X6 = 0x7BA1FB51F424A6257D85599CB596AA3BB0E83C94FA14CA716E5D933A507BA8CD1B6ADDC171D260ADE722E01C7D69EABA0F5F3DFCCCCB2711B8407D0891E2179525577619F96735D55C98414F61042457059F93BB8613C81DD656885B4DBD5554A792C1E8226E0207AB3BAE04E63BF5AB68190DC4915709E2EB2C6E3DDBF0B89A
    X7 = 0xCF3B0D393C7EF1753E602E0B088FC15D0C06F949631CC9083EF7AB16C65148B47AA63EABB6151E39D85A5A339C065D9F1B4A33AB587F6093EB097FC6BAB25A6B27CC8AE7D77775869B0864F6BDB7C1D8DCFA1A28DCE4DF346D95EAF90047020F4F8AD7E9496ED86E7C1BD840724348D88A308CA21174C61CF759BA106C548458
    X8 = 0xE8E2BA97F5BDB287984E2A61B5A489EA4DC45C2C8E3601F151A20B92D1D6B7C0800712D07E4DE5D2CA6F9CBFFF25A64989E0779B98E56DF1F4D8C301D3D743B86690D567C7F3A6BD74AA08B7DF1970EB4B53EF2D5F8A7C3BE585462DC3A972F99CD99B4EE1738A719476EBE70BA5A89447E020566E2A98EBAB5747BE0758A312
    X9 = 0xCB1CD415BB82A8036035396806A37E28F23A709A51301FEA6B0195E3DA1A5FF7F71C6BD89387B955FF9E0D743F00E09286CF32520428791BAC19368936F2E9BDA4FFC4487A2BC999BB22249CFFEDC16DD686AC91D9A4CFE459E114CE38858F2B4972B09FD3C463C5B40CD553E640AFE5803A390766842D2B6A74152923F329DB
    X0 = dec2mt(X0, n, m)
    X1 = dec2mt(X1, n, m)
    X2 = dec2mt(X2, n, m)
    X3 = dec2mt(X3, n, m)
    X4 = dec2mt(X4, n, m)
    X5 = dec2mt(X5, n, m)
    X6 = dec2mt(X6, n, m)
    X7 = dec2mt(X7, n, m)
    X8 = dec2mt(X8, n, m)
    X9 = dec2mt(X9, n, m)

    delta1 = X1 - X0
    delta2 = X2 - X1
    A = delta2 * delta1 ^ (-1)
    B = X1 - A * X0
    assert A * X0 + B == X1
    assert A * X1 + B == X2
    assert A * X2 + B == X3
    assert A * X3 + B == X4
    assert A * X4 + B == X5

    Aorder = A.multiplicative_order()
    power = Integer(pow(1337, 1337, Aorder))
    ApowN = A ^ power
    I = matrix.identity(Zmod(m), n)
    Fin = ApowN * X0 + (ApowN - I) * (A - I) ^ (-1) * B
    p = next_prime(mt2dec(Fin, n, m))

    assert N % p == 0
    return p


p1 = solve1()
p2 = solve2()
p3 = solve3()

q = N // (p1 * p2 * p3)
phiN = (p1 - 1) * (p2 - 1) * (p3 - 1) * (q - 1)
e = 0x10001
d = pow(e, -1, phiN)
m = pow(c, d, N)

flag = long_to_bytes(int(m))

assert flag == b"RCTF{Wo0oOoo0Oo0W_LCG_masT3r}"
print(flag)
